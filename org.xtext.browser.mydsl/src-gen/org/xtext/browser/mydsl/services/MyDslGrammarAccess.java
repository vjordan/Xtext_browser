/*
 * generated by Xtext 2.15.0
 */
package org.xtext.browser.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberSTRINGTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyINSTRUCTIONParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Test:
		//	"Test" number=STRING '{'
		//	body+=INSTRUCTION*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"Test" number=STRING '{' body+=INSTRUCTION* '}'
		public Group getGroup() { return cGroup; }
		
		//"Test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//number=STRING
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//STRING
		public RuleCall getNumberSTRINGTerminalRuleCall_1_0() { return cNumberSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body+=INSTRUCTION*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//INSTRUCTION
		public RuleCall getBodyINSTRUCTIONParserRuleCall_3_0() { return cBodyINSTRUCTIONParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class INSTRUCTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.INSTRUCTION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGoToParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVerifyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClickParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInsertParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUncheckParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCheckParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChooseParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cVariableParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReadParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cCountParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPasteParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cForParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cEndForParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//INSTRUCTION:
		//	Open | GoTo | Verify | Click | Insert | Uncheck | Check | Choose | Variable | Read | Count | Paste | For | EndFor;
		@Override public ParserRule getRule() { return rule; }
		
		//Open | GoTo | Verify | Click | Insert | Uncheck | Check | Choose | Variable | Read | Count | Paste | For | EndFor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Open
		public RuleCall getOpenParserRuleCall_0() { return cOpenParserRuleCall_0; }
		
		//GoTo
		public RuleCall getGoToParserRuleCall_1() { return cGoToParserRuleCall_1; }
		
		//Verify
		public RuleCall getVerifyParserRuleCall_2() { return cVerifyParserRuleCall_2; }
		
		//Click
		public RuleCall getClickParserRuleCall_3() { return cClickParserRuleCall_3; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_4() { return cInsertParserRuleCall_4; }
		
		//Uncheck
		public RuleCall getUncheckParserRuleCall_5() { return cUncheckParserRuleCall_5; }
		
		//Check
		public RuleCall getCheckParserRuleCall_6() { return cCheckParserRuleCall_6; }
		
		//Choose
		public RuleCall getChooseParserRuleCall_7() { return cChooseParserRuleCall_7; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_8() { return cVariableParserRuleCall_8; }
		
		//Read
		public RuleCall getReadParserRuleCall_9() { return cReadParserRuleCall_9; }
		
		//Count
		public RuleCall getCountParserRuleCall_10() { return cCountParserRuleCall_10; }
		
		//Paste
		public RuleCall getPasteParserRuleCall_11() { return cPasteParserRuleCall_11; }
		
		//For
		public RuleCall getForParserRuleCall_12() { return cForParserRuleCall_12; }
		
		//EndFor
		public RuleCall getEndForParserRuleCall_13() { return cEndForParserRuleCall_13; }
	}
	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrowserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowserSTRINGTerminalRuleCall_1_0 = (RuleCall)cBrowserAssignment_1.eContents().get(0);
		
		//Open:
		//	"Open" browser=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"Open" browser=STRING
		public Group getGroup() { return cGroup; }
		
		//"Open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//browser=STRING
		public Assignment getBrowserAssignment_1() { return cBrowserAssignment_1; }
		
		//STRING
		public RuleCall getBrowserSTRINGTerminalRuleCall_1_0() { return cBrowserSTRINGTerminalRuleCall_1_0; }
	}
	public class GoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.GoTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//GoTo:
		//	"GoTo" url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"GoTo" url=STRING
		public Group getGroup() { return cGroup; }
		
		//"GoTo"
		public Keyword getGoToKeyword_0() { return cGoToKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTYPE_VERIFYParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Verify:
		//	"Verify" TYPE_VERIFY;
		@Override public ParserRule getRule() { return rule; }
		
		//"Verify" TYPE_VERIFY
		public Group getGroup() { return cGroup; }
		
		//"Verify"
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//TYPE_VERIFY
		public RuleCall getTYPE_VERIFYParserRuleCall_1() { return cTYPE_VERIFYParserRuleCall_1; }
	}
	public class TYPE_VERIFYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_VERIFY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TYPE_VERIFY:
		//	Contains | Equal;
		@Override public ParserRule getRule() { return rule; }
		
		//Contains | Equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_0() { return cContainsParserRuleCall_0; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_1() { return cEqualParserRuleCall_1; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPE_CONTAINSParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cParametreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametreTYPE_PARAMETREParserRuleCall_2_0 = (RuleCall)cParametreAssignment_2.eContents().get(0);
		
		//Contains:
		//	"Contains" type=TYPE_CONTAINS parametre=TYPE_PARAMETRE;
		@Override public ParserRule getRule() { return rule; }
		
		//"Contains" type=TYPE_CONTAINS parametre=TYPE_PARAMETRE
		public Group getGroup() { return cGroup; }
		
		//"Contains"
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//type=TYPE_CONTAINS
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE_CONTAINS
		public RuleCall getTypeTYPE_CONTAINSParserRuleCall_1_0() { return cTypeTYPE_CONTAINSParserRuleCall_1_0; }
		
		//parametre=TYPE_PARAMETRE
		public Assignment getParametreAssignment_2() { return cParametreAssignment_2; }
		
		//TYPE_PARAMETRE
		public RuleCall getParametreTYPE_PARAMETREParserRuleCall_2_0() { return cParametreTYPE_PARAMETREParserRuleCall_2_0; }
	}
	public class TYPE_CONTAINSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_CONTAINS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLinkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cImageKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TYPE_CONTAINS:
		//	"Text" | "Link" | "Image";
		@Override public ParserRule getRule() { return rule; }
		
		//"Text" | "Link" | "Image"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//"Link"
		public Keyword getLinkKeyword_1() { return cLinkKeyword_1; }
		
		//"Image"
		public Keyword getImageKeyword_2() { return cImageKeyword_2; }
	}
	public class TYPE_PARAMETREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_PARAMETRE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TYPE_PARAMETRE:
		//	Value | Var;
		@Override public ParserRule getRule() { return rule; }
		
		//Value | Var
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }
		
		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Value");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Value:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Var:
		//	'(' value=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' value=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVar1IDTerminalRuleCall_2_0 = (RuleCall)cVar1Assignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVar2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVar2IDTerminalRuleCall_5_0 = (RuleCall)cVar2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Equal:
		//	"Equal" '(' var1=ID ')' '(' var2=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//"Equal" '(' var1=ID ')' '(' var2=ID ')'
		public Group getGroup() { return cGroup; }
		
		//"Equal"
		public Keyword getEqualKeyword_0() { return cEqualKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//var1=ID
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }
		
		//ID
		public RuleCall getVar1IDTerminalRuleCall_2_0() { return cVar1IDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//var2=ID
		public Assignment getVar2Assignment_5() { return cVar2Assignment_5; }
		
		//ID
		public RuleCall getVar2IDTerminalRuleCall_5_0() { return cVar2IDTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPE_CLICKParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cParametreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametreTYPE_PARAMETREParserRuleCall_2_0 = (RuleCall)cParametreAssignment_2.eContents().get(0);
		
		//Click:
		//	"Click" type=TYPE_CLICK parametre=TYPE_PARAMETRE;
		@Override public ParserRule getRule() { return rule; }
		
		//"Click" type=TYPE_CLICK parametre=TYPE_PARAMETRE
		public Group getGroup() { return cGroup; }
		
		//"Click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//type=TYPE_CLICK
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE_CLICK
		public RuleCall getTypeTYPE_CLICKParserRuleCall_1_0() { return cTypeTYPE_CLICKParserRuleCall_1_0; }
		
		//parametre=TYPE_PARAMETRE
		public Assignment getParametreAssignment_2() { return cParametreAssignment_2; }
		
		//TYPE_PARAMETRE
		public RuleCall getParametreTYPE_PARAMETREParserRuleCall_2_0() { return cParametreTYPE_PARAMETREParserRuleCall_2_0; }
	}
	public class TYPE_CLICKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_CLICK");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cImageKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TYPE_CLICK:
		//	"Link" | "Button" | "Image";
		@Override public ParserRule getRule() { return rule; }
		
		//"Link" | "Button" | "Image"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//"Button"
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//"Image"
		public Keyword getImageKeyword_2() { return cImageKeyword_2; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTYPE_INSERTParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametreAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametreTYPE_PARAMETREParserRuleCall_5_0 = (RuleCall)cParametreAssignment_5.eContents().get(0);
		
		//Insert:
		//	"Insert" "in" type=TYPE_INSERT name=STRING "with" parametre=TYPE_PARAMETRE;
		@Override public ParserRule getRule() { return rule; }
		
		//"Insert" "in" type=TYPE_INSERT name=STRING "with" parametre=TYPE_PARAMETRE
		public Group getGroup() { return cGroup; }
		
		//"Insert"
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//type=TYPE_INSERT
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TYPE_INSERT
		public RuleCall getTypeTYPE_INSERTParserRuleCall_2_0() { return cTypeTYPE_INSERTParserRuleCall_2_0; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//"with"
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//parametre=TYPE_PARAMETRE
		public Assignment getParametreAssignment_5() { return cParametreAssignment_5; }
		
		//TYPE_PARAMETRE
		public RuleCall getParametreTYPE_PARAMETREParserRuleCall_5_0() { return cParametreTYPE_PARAMETREParserRuleCall_5_0; }
	}
	public class TYPE_INSERTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_INSERT");
		private final Keyword cSearchFieldKeyword = (Keyword)rule.eContents().get(1);
		
		//TYPE_INSERT:
		//	"SearchField";
		@Override public ParserRule getRule() { return rule; }
		
		//"SearchField"
		public Keyword getSearchFieldKeyword() { return cSearchFieldKeyword; }
	}
	public class UncheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Uncheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUncheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Uncheck:
		//	"Uncheck" type=TYPE_CHECK_UNCHECK;
		@Override public ParserRule getRule() { return rule; }
		
		//"Uncheck" type=TYPE_CHECK_UNCHECK
		public Group getGroup() { return cGroup; }
		
		//"Uncheck"
		public Keyword getUncheckKeyword_0() { return cUncheckKeyword_0; }
		
		//type=TYPE_CHECK_UNCHECK
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE_CHECK_UNCHECK
		public RuleCall getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0() { return cTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0; }
	}
	public class TYPE_CHECK_UNCHECKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_CHECK_UNCHECK");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTableauAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTableauSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTableauAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TYPE_CHECK_UNCHECK:
		//	"all" | '[' tableau+=STRING* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//"all" | '[' tableau+=STRING* ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }
		
		//'[' tableau+=STRING* ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//tableau+=STRING*
		public Assignment getTableauAssignment_1_1() { return cTableauAssignment_1_1; }
		
		//STRING
		public RuleCall getTableauSTRINGTerminalRuleCall_1_1_0() { return cTableauSTRINGTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Check:
		//	"Check" type=TYPE_CHECK_UNCHECK;
		@Override public ParserRule getRule() { return rule; }
		
		//"Check" type=TYPE_CHECK_UNCHECK
		public Group getGroup() { return cGroup; }
		
		//"Check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//type=TYPE_CHECK_UNCHECK
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE_CHECK_UNCHECK
		public RuleCall getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0() { return cTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0; }
	}
	public class ChooseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Choose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChooseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPE_CHOOSEParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cParametreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametreSTRINGTerminalRuleCall_2_0 = (RuleCall)cParametreAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//Choose:
		//	"Choose" type=TYPE_CHOOSE parametre=STRING "in" name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"Choose" type=TYPE_CHOOSE parametre=STRING "in" name=STRING
		public Group getGroup() { return cGroup; }
		
		//"Choose"
		public Keyword getChooseKeyword_0() { return cChooseKeyword_0; }
		
		//type=TYPE_CHOOSE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE_CHOOSE
		public RuleCall getTypeTYPE_CHOOSEParserRuleCall_1_0() { return cTypeTYPE_CHOOSEParserRuleCall_1_0; }
		
		//parametre=STRING
		public Assignment getParametreAssignment_2() { return cParametreAssignment_2; }
		
		//STRING
		public RuleCall getParametreSTRINGTerminalRuleCall_2_0() { return cParametreSTRINGTerminalRuleCall_2_0; }
		
		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//name=STRING
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }
	}
	public class TYPE_CHOOSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_CHOOSE");
		private final Keyword cBoxKeyword = (Keyword)rule.eContents().get(1);
		
		//TYPE_CHOOSE:
		//	"Box";
		@Override public ParserRule getRule() { return rule; }
		
		//"Box"
		public Keyword getBoxKeyword() { return cBoxKeyword; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstructionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionTYPE_INSTRUCTIONParserRuleCall_2_0 = (RuleCall)cInstructionAssignment_2.eContents().get(0);
		
		//Variable:
		//	name=ID "=" instruction=TYPE_INSTRUCTION;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" instruction=TYPE_INSTRUCTION
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//instruction=TYPE_INSTRUCTION
		public Assignment getInstructionAssignment_2() { return cInstructionAssignment_2; }
		
		//TYPE_INSTRUCTION
		public RuleCall getInstructionTYPE_INSTRUCTIONParserRuleCall_2_0() { return cInstructionTYPE_INSTRUCTIONParserRuleCall_2_0; }
	}
	public class TYPE_INSTRUCTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_INSTRUCTION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCountParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TYPE_INSTRUCTION:
		//	Read | Count;
		@Override public ParserRule getRule() { return rule; }
		
		//Read | Count
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Read
		public RuleCall getReadParserRuleCall_0() { return cReadParserRuleCall_0; }
		
		//Count
		public RuleCall getCountParserRuleCall_1() { return cCountParserRuleCall_1; }
	}
	public class ReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Read");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPE_READParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cOfElementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametreSTRINGTerminalRuleCall_3_0 = (RuleCall)cParametreAssignment_3.eContents().get(0);
		
		//Read:
		//	"Read" type=TYPE_READ "of Element " parametre=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"Read" type=TYPE_READ "of Element " parametre=STRING
		public Group getGroup() { return cGroup; }
		
		//"Read"
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//type=TYPE_READ
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE_READ
		public RuleCall getTypeTYPE_READParserRuleCall_1_0() { return cTypeTYPE_READParserRuleCall_1_0; }
		
		//"of Element "
		public Keyword getOfElementKeyword_2() { return cOfElementKeyword_2; }
		
		//parametre=STRING
		public Assignment getParametreAssignment_3() { return cParametreAssignment_3; }
		
		//STRING
		public RuleCall getParametreSTRINGTerminalRuleCall_3_0() { return cParametreSTRINGTerminalRuleCall_3_0; }
	}
	public class TYPE_READElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_READ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTitleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TYPE_READ:
		//	"Link" | "Title";
		@Override public ParserRule getRule() { return rule; }
		
		//"Link" | "Title"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//"Title"
		public Keyword getTitleKeyword_1() { return cTitleKeyword_1; }
	}
	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Count");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountOfElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametreSTRINGTerminalRuleCall_1_0 = (RuleCall)cParametreAssignment_1.eContents().get(0);
		
		//Count:
		//	"Count of Element " parametre=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"Count of Element " parametre=STRING
		public Group getGroup() { return cGroup; }
		
		//"Count of Element "
		public Keyword getCountOfElementKeyword_0() { return cCountOfElementKeyword_0; }
		
		//parametre=STRING
		public Assignment getParametreAssignment_1() { return cParametreAssignment_1; }
		
		//STRING
		public RuleCall getParametreSTRINGTerminalRuleCall_1_0() { return cParametreSTRINGTerminalRuleCall_1_0; }
	}
	public class PasteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.Paste");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPasteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPE_PASTEParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametreIDTerminalRuleCall_3_0 = (RuleCall)cParametreAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Paste:
		//	"Paste" type=TYPE_PASTE '(' parametre=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//"Paste" type=TYPE_PASTE '(' parametre=ID ')'
		public Group getGroup() { return cGroup; }
		
		//"Paste"
		public Keyword getPasteKeyword_0() { return cPasteKeyword_0; }
		
		//type=TYPE_PASTE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE_PASTE
		public RuleCall getTypeTYPE_PASTEParserRuleCall_1_0() { return cTypeTYPE_PASTEParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parametre=ID
		public Assignment getParametreAssignment_3() { return cParametreAssignment_3; }
		
		//ID
		public RuleCall getParametreIDTerminalRuleCall_3_0() { return cParametreIDTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TYPE_PASTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.TYPE_PASTE");
		private final Keyword cSearchFieldKeyword = (Keyword)rule.eContents().get(1);
		
		//TYPE_PASTE:
		//	"SearchField";
		@Override public ParserRule getRule() { return rule; }
		
		//"SearchField"
		public Keyword getSearchFieldKeyword() { return cSearchFieldKeyword; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableauAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableauSTRINGTerminalRuleCall_4_0 = (RuleCall)cTableauAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//For:
		//	"For" name=ID "=" '[' tableau+=STRING* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//"For" name=ID "=" '[' tableau+=STRING* ']'
		public Group getGroup() { return cGroup; }
		
		//"For"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//tableau+=STRING*
		public Assignment getTableauAssignment_4() { return cTableauAssignment_4; }
		
		//STRING
		public RuleCall getTableauSTRINGTerminalRuleCall_4_0() { return cTableauSTRINGTerminalRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class EndForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.browser.mydsl.MyDsl.EndFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EndFor:
		//	"EndFor" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"EndFor" name=ID
		public Group getGroup() { return cGroup; }
		
		//"EndFor"
		public Keyword getEndForKeyword_0() { return cEndForKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final TestElements pTest;
	private final INSTRUCTIONElements pINSTRUCTION;
	private final OpenElements pOpen;
	private final GoToElements pGoTo;
	private final VerifyElements pVerify;
	private final TYPE_VERIFYElements pTYPE_VERIFY;
	private final ContainsElements pContains;
	private final TYPE_CONTAINSElements pTYPE_CONTAINS;
	private final TYPE_PARAMETREElements pTYPE_PARAMETRE;
	private final ValueElements pValue;
	private final VarElements pVar;
	private final EqualElements pEqual;
	private final ClickElements pClick;
	private final TYPE_CLICKElements pTYPE_CLICK;
	private final InsertElements pInsert;
	private final TYPE_INSERTElements pTYPE_INSERT;
	private final UncheckElements pUncheck;
	private final TYPE_CHECK_UNCHECKElements pTYPE_CHECK_UNCHECK;
	private final CheckElements pCheck;
	private final ChooseElements pChoose;
	private final TYPE_CHOOSEElements pTYPE_CHOOSE;
	private final VariableElements pVariable;
	private final TYPE_INSTRUCTIONElements pTYPE_INSTRUCTION;
	private final ReadElements pRead;
	private final TYPE_READElements pTYPE_READ;
	private final CountElements pCount;
	private final PasteElements pPaste;
	private final TYPE_PASTEElements pTYPE_PASTE;
	private final ForElements pFor;
	private final EndForElements pEndFor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTest = new TestElements();
		this.pINSTRUCTION = new INSTRUCTIONElements();
		this.pOpen = new OpenElements();
		this.pGoTo = new GoToElements();
		this.pVerify = new VerifyElements();
		this.pTYPE_VERIFY = new TYPE_VERIFYElements();
		this.pContains = new ContainsElements();
		this.pTYPE_CONTAINS = new TYPE_CONTAINSElements();
		this.pTYPE_PARAMETRE = new TYPE_PARAMETREElements();
		this.pValue = new ValueElements();
		this.pVar = new VarElements();
		this.pEqual = new EqualElements();
		this.pClick = new ClickElements();
		this.pTYPE_CLICK = new TYPE_CLICKElements();
		this.pInsert = new InsertElements();
		this.pTYPE_INSERT = new TYPE_INSERTElements();
		this.pUncheck = new UncheckElements();
		this.pTYPE_CHECK_UNCHECK = new TYPE_CHECK_UNCHECKElements();
		this.pCheck = new CheckElements();
		this.pChoose = new ChooseElements();
		this.pTYPE_CHOOSE = new TYPE_CHOOSEElements();
		this.pVariable = new VariableElements();
		this.pTYPE_INSTRUCTION = new TYPE_INSTRUCTIONElements();
		this.pRead = new ReadElements();
		this.pTYPE_READ = new TYPE_READElements();
		this.pCount = new CountElements();
		this.pPaste = new PasteElements();
		this.pTYPE_PASTE = new TYPE_PASTEElements();
		this.pFor = new ForElements();
		this.pEndFor = new EndForElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.browser.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Test:
	//	"Test" number=STRING '{'
	//	body+=INSTRUCTION*
	//	'}';
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//INSTRUCTION:
	//	Open | GoTo | Verify | Click | Insert | Uncheck | Check | Choose | Variable | Read | Count | Paste | For | EndFor;
	public INSTRUCTIONElements getINSTRUCTIONAccess() {
		return pINSTRUCTION;
	}
	
	public ParserRule getINSTRUCTIONRule() {
		return getINSTRUCTIONAccess().getRule();
	}
	
	//Open:
	//	"Open" browser=STRING;
	public OpenElements getOpenAccess() {
		return pOpen;
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}
	
	//GoTo:
	//	"GoTo" url=STRING;
	public GoToElements getGoToAccess() {
		return pGoTo;
	}
	
	public ParserRule getGoToRule() {
		return getGoToAccess().getRule();
	}
	
	//Verify:
	//	"Verify" TYPE_VERIFY;
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}
	
	//TYPE_VERIFY:
	//	Contains | Equal;
	public TYPE_VERIFYElements getTYPE_VERIFYAccess() {
		return pTYPE_VERIFY;
	}
	
	public ParserRule getTYPE_VERIFYRule() {
		return getTYPE_VERIFYAccess().getRule();
	}
	
	//Contains:
	//	"Contains" type=TYPE_CONTAINS parametre=TYPE_PARAMETRE;
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//TYPE_CONTAINS:
	//	"Text" | "Link" | "Image";
	public TYPE_CONTAINSElements getTYPE_CONTAINSAccess() {
		return pTYPE_CONTAINS;
	}
	
	public ParserRule getTYPE_CONTAINSRule() {
		return getTYPE_CONTAINSAccess().getRule();
	}
	
	//TYPE_PARAMETRE:
	//	Value | Var;
	public TYPE_PARAMETREElements getTYPE_PARAMETREAccess() {
		return pTYPE_PARAMETRE;
	}
	
	public ParserRule getTYPE_PARAMETRERule() {
		return getTYPE_PARAMETREAccess().getRule();
	}
	
	//Value:
	//	value=STRING;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Var:
	//	'(' value=ID ')';
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//Equal:
	//	"Equal" '(' var1=ID ')' '(' var2=ID ')';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Click:
	//	"Click" type=TYPE_CLICK parametre=TYPE_PARAMETRE;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//TYPE_CLICK:
	//	"Link" | "Button" | "Image";
	public TYPE_CLICKElements getTYPE_CLICKAccess() {
		return pTYPE_CLICK;
	}
	
	public ParserRule getTYPE_CLICKRule() {
		return getTYPE_CLICKAccess().getRule();
	}
	
	//Insert:
	//	"Insert" "in" type=TYPE_INSERT name=STRING "with" parametre=TYPE_PARAMETRE;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//TYPE_INSERT:
	//	"SearchField";
	public TYPE_INSERTElements getTYPE_INSERTAccess() {
		return pTYPE_INSERT;
	}
	
	public ParserRule getTYPE_INSERTRule() {
		return getTYPE_INSERTAccess().getRule();
	}
	
	//Uncheck:
	//	"Uncheck" type=TYPE_CHECK_UNCHECK;
	public UncheckElements getUncheckAccess() {
		return pUncheck;
	}
	
	public ParserRule getUncheckRule() {
		return getUncheckAccess().getRule();
	}
	
	//TYPE_CHECK_UNCHECK:
	//	"all" | '[' tableau+=STRING* ']';
	public TYPE_CHECK_UNCHECKElements getTYPE_CHECK_UNCHECKAccess() {
		return pTYPE_CHECK_UNCHECK;
	}
	
	public ParserRule getTYPE_CHECK_UNCHECKRule() {
		return getTYPE_CHECK_UNCHECKAccess().getRule();
	}
	
	//Check:
	//	"Check" type=TYPE_CHECK_UNCHECK;
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//Choose:
	//	"Choose" type=TYPE_CHOOSE parametre=STRING "in" name=STRING;
	public ChooseElements getChooseAccess() {
		return pChoose;
	}
	
	public ParserRule getChooseRule() {
		return getChooseAccess().getRule();
	}
	
	//TYPE_CHOOSE:
	//	"Box";
	public TYPE_CHOOSEElements getTYPE_CHOOSEAccess() {
		return pTYPE_CHOOSE;
	}
	
	public ParserRule getTYPE_CHOOSERule() {
		return getTYPE_CHOOSEAccess().getRule();
	}
	
	//Variable:
	//	name=ID "=" instruction=TYPE_INSTRUCTION;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//TYPE_INSTRUCTION:
	//	Read | Count;
	public TYPE_INSTRUCTIONElements getTYPE_INSTRUCTIONAccess() {
		return pTYPE_INSTRUCTION;
	}
	
	public ParserRule getTYPE_INSTRUCTIONRule() {
		return getTYPE_INSTRUCTIONAccess().getRule();
	}
	
	//Read:
	//	"Read" type=TYPE_READ "of Element " parametre=STRING;
	public ReadElements getReadAccess() {
		return pRead;
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}
	
	//TYPE_READ:
	//	"Link" | "Title";
	public TYPE_READElements getTYPE_READAccess() {
		return pTYPE_READ;
	}
	
	public ParserRule getTYPE_READRule() {
		return getTYPE_READAccess().getRule();
	}
	
	//Count:
	//	"Count of Element " parametre=STRING;
	public CountElements getCountAccess() {
		return pCount;
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	//Paste:
	//	"Paste" type=TYPE_PASTE '(' parametre=ID ')';
	public PasteElements getPasteAccess() {
		return pPaste;
	}
	
	public ParserRule getPasteRule() {
		return getPasteAccess().getRule();
	}
	
	//TYPE_PASTE:
	//	"SearchField";
	public TYPE_PASTEElements getTYPE_PASTEAccess() {
		return pTYPE_PASTE;
	}
	
	public ParserRule getTYPE_PASTERule() {
		return getTYPE_PASTEAccess().getRule();
	}
	
	//For:
	//	"For" name=ID "=" '[' tableau+=STRING* ']';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//EndFor:
	//	"EndFor" name=ID;
	public EndForElements getEndForAccess() {
		return pEndFor;
	}
	
	public ParserRule getEndForRule() {
		return getEndForAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
