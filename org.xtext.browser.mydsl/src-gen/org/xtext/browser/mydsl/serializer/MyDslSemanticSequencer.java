/*
 * generated by Xtext 2.15.0
 */
package org.xtext.browser.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.browser.mydsl.myDsl.Check;
import org.xtext.browser.mydsl.myDsl.Choose;
import org.xtext.browser.mydsl.myDsl.Click;
import org.xtext.browser.mydsl.myDsl.Contains;
import org.xtext.browser.mydsl.myDsl.Count;
import org.xtext.browser.mydsl.myDsl.EndFor;
import org.xtext.browser.mydsl.myDsl.Equal;
import org.xtext.browser.mydsl.myDsl.For;
import org.xtext.browser.mydsl.myDsl.GoTo;
import org.xtext.browser.mydsl.myDsl.Insert;
import org.xtext.browser.mydsl.myDsl.MyDslPackage;
import org.xtext.browser.mydsl.myDsl.Open;
import org.xtext.browser.mydsl.myDsl.Paste;
import org.xtext.browser.mydsl.myDsl.Read;
import org.xtext.browser.mydsl.myDsl.TYPE_CHECK_UNCHECK;
import org.xtext.browser.mydsl.myDsl.Test;
import org.xtext.browser.mydsl.myDsl.Uncheck;
import org.xtext.browser.mydsl.myDsl.Value;
import org.xtext.browser.mydsl.myDsl.Var;
import org.xtext.browser.mydsl.myDsl.Variable;
import org.xtext.browser.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CHECK:
				sequence_Check(context, (Check) semanticObject); 
				return; 
			case MyDslPackage.CHOOSE:
				sequence_Choose(context, (Choose) semanticObject); 
				return; 
			case MyDslPackage.CLICK:
				sequence_Click(context, (Click) semanticObject); 
				return; 
			case MyDslPackage.CONTAINS:
				sequence_Contains(context, (Contains) semanticObject); 
				return; 
			case MyDslPackage.COUNT:
				sequence_Count(context, (Count) semanticObject); 
				return; 
			case MyDslPackage.END_FOR:
				sequence_EndFor(context, (EndFor) semanticObject); 
				return; 
			case MyDslPackage.EQUAL:
				sequence_Equal(context, (Equal) semanticObject); 
				return; 
			case MyDslPackage.FOR:
				sequence_For(context, (For) semanticObject); 
				return; 
			case MyDslPackage.GO_TO:
				sequence_GoTo(context, (GoTo) semanticObject); 
				return; 
			case MyDslPackage.INSERT:
				sequence_Insert(context, (Insert) semanticObject); 
				return; 
			case MyDslPackage.OPEN:
				sequence_Open(context, (Open) semanticObject); 
				return; 
			case MyDslPackage.PASTE:
				sequence_Paste(context, (Paste) semanticObject); 
				return; 
			case MyDslPackage.READ:
				sequence_Read(context, (Read) semanticObject); 
				return; 
			case MyDslPackage.TYPE_CHECK_UNCHECK:
				sequence_TYPE_CHECK_UNCHECK(context, (TYPE_CHECK_UNCHECK) semanticObject); 
				return; 
			case MyDslPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			case MyDslPackage.UNCHECK:
				sequence_Uncheck(context, (Uncheck) semanticObject); 
				return; 
			case MyDslPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			case MyDslPackage.VAR:
				sequence_Var(context, (Var) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Check
	 *     Check returns Check
	 *
	 * Constraint:
	 *     type=TYPE_CHECK_UNCHECK
	 */
	protected void sequence_Check(ISerializationContext context, Check semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CHECK__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CHECK__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Choose
	 *     Choose returns Choose
	 *
	 * Constraint:
	 *     (type=TYPE_CHOOSE parametre=STRING name=STRING)
	 */
	protected void sequence_Choose(ISerializationContext context, Choose semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CHOOSE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CHOOSE__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CHOOSE__PARAMETRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CHOOSE__PARAMETRE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CHOOSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CHOOSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChooseAccess().getTypeTYPE_CHOOSEParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getChooseAccess().getParametreSTRINGTerminalRuleCall_2_0(), semanticObject.getParametre());
		feeder.accept(grammarAccess.getChooseAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Click
	 *     Click returns Click
	 *
	 * Constraint:
	 *     (type=TYPE_CLICK parametre=TYPE_PARAMETRE)
	 */
	protected void sequence_Click(ISerializationContext context, Click semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CLICK__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CLICK__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CLICK__PARAMETRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CLICK__PARAMETRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickAccess().getTypeTYPE_CLICKParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getClickAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0(), semanticObject.getParametre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Contains
	 *     Verify returns Contains
	 *     TYPE_VERIFY returns Contains
	 *     Contains returns Contains
	 *
	 * Constraint:
	 *     (type=TYPE_CONTAINS parametre=TYPE_PARAMETRE)
	 */
	protected void sequence_Contains(ISerializationContext context, Contains semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTAINS__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTAINS__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTAINS__PARAMETRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTAINS__PARAMETRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainsAccess().getTypeTYPE_CONTAINSParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getContainsAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0(), semanticObject.getParametre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Count
	 *     TYPE_INSTRUCTION returns Count
	 *     Count returns Count
	 *
	 * Constraint:
	 *     parametre=STRING
	 */
	protected void sequence_Count(ISerializationContext context, Count semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COUNT__PARAMETRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COUNT__PARAMETRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCountAccess().getParametreSTRINGTerminalRuleCall_1_0(), semanticObject.getParametre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns EndFor
	 *     EndFor returns EndFor
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EndFor(ISerializationContext context, EndFor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.END_FOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.END_FOR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEndForAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Equal
	 *     Verify returns Equal
	 *     TYPE_VERIFY returns Equal
	 *     Equal returns Equal
	 *
	 * Constraint:
	 *     (var1=ID var2=ID)
	 */
	protected void sequence_Equal(ISerializationContext context, Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EQUAL__VAR1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EQUAL__VAR1));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EQUAL__VAR2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EQUAL__VAR2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEqualAccess().getVar1IDTerminalRuleCall_2_0(), semanticObject.getVar1());
		feeder.accept(grammarAccess.getEqualAccess().getVar2IDTerminalRuleCall_5_0(), semanticObject.getVar2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns For
	 *     For returns For
	 *
	 * Constraint:
	 *     (name=ID tableau+=STRING*)
	 */
	protected void sequence_For(ISerializationContext context, For semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns GoTo
	 *     GoTo returns GoTo
	 *
	 * Constraint:
	 *     url=STRING
	 */
	protected void sequence_GoTo(ISerializationContext context, GoTo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GO_TO__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GO_TO__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoToAccess().getUrlSTRINGTerminalRuleCall_1_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Insert
	 *     Insert returns Insert
	 *
	 * Constraint:
	 *     (type=TYPE_INSERT name=STRING parametre=TYPE_PARAMETRE)
	 */
	protected void sequence_Insert(ISerializationContext context, Insert semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSERT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSERT__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSERT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSERT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSERT__PARAMETRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSERT__PARAMETRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertAccess().getTypeTYPE_INSERTParserRuleCall_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getInsertAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInsertAccess().getParametreTYPE_PARAMETREParserRuleCall_5_0(), semanticObject.getParametre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Open
	 *     Open returns Open
	 *
	 * Constraint:
	 *     browser=STRING
	 */
	protected void sequence_Open(ISerializationContext context, Open semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OPEN__BROWSER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OPEN__BROWSER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOpenAccess().getBrowserSTRINGTerminalRuleCall_1_0(), semanticObject.getBrowser());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Paste
	 *     Paste returns Paste
	 *
	 * Constraint:
	 *     (type=TYPE_PASTE parametre=ID)
	 */
	protected void sequence_Paste(ISerializationContext context, Paste semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PASTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PASTE__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PASTE__PARAMETRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PASTE__PARAMETRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPasteAccess().getTypeTYPE_PASTEParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPasteAccess().getParametreIDTerminalRuleCall_3_0(), semanticObject.getParametre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Read
	 *     TYPE_INSTRUCTION returns Read
	 *     Read returns Read
	 *
	 * Constraint:
	 *     (type=TYPE_READ parametre=STRING)
	 */
	protected void sequence_Read(ISerializationContext context, Read semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.READ__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.READ__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.READ__PARAMETRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.READ__PARAMETRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReadAccess().getTypeTYPE_READParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getReadAccess().getParametreSTRINGTerminalRuleCall_3_0(), semanticObject.getParametre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TYPE_CHECK_UNCHECK returns TYPE_CHECK_UNCHECK
	 *
	 * Constraint:
	 *     tableau+=STRING+
	 */
	protected void sequence_TYPE_CHECK_UNCHECK(ISerializationContext context, TYPE_CHECK_UNCHECK semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Test returns Test
	 *
	 * Constraint:
	 *     (number=STRING body+=INSTRUCTION*)
	 */
	protected void sequence_Test(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Uncheck
	 *     Uncheck returns Uncheck
	 *
	 * Constraint:
	 *     type=TYPE_CHECK_UNCHECK
	 */
	protected void sequence_Uncheck(ISerializationContext context, Uncheck semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.UNCHECK__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.UNCHECK__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUncheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TYPE_PARAMETRE returns Value
	 *     Value returns Value
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE_PARAMETRE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE_PARAMETRE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TYPE_PARAMETRE returns Var
	 *     Var returns Var
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_Var(ISerializationContext context, Var semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE_PARAMETRE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE_PARAMETRE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarAccess().getValueIDTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID instruction=TYPE_INSTRUCTION)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE__INSTRUCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE__INSTRUCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getInstructionTYPE_INSTRUCTIONParserRuleCall_2_0(), semanticObject.getInstruction());
		feeder.finish();
	}
	
	
}
