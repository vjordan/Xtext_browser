/*
 * generated by Xtext 2.15.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.browser.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.browser.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.browser.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Test";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	iv_ruleTest=ruleTest
	{ $current=$iv_ruleTest.current; }
	EOF;

// Rule Test
ruleTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Test'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestAccess().getTestKeyword_0());
		}
		(
			(
				lv_number_1_0=RULE_STRING
				{
					newLeafNode(lv_number_1_0, grammarAccess.getTestAccess().getNumberSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAccess().getBodyINSTRUCTIONParserRuleCall_3_0());
				}
				lv_body_3_0=ruleINSTRUCTION
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestRule());
					}
					add(
						$current,
						"body",
						lv_body_3_0,
						"org.xtext.browser.mydsl.MyDsl.INSTRUCTION");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTestAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleINSTRUCTION
entryRuleINSTRUCTION returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getINSTRUCTIONRule()); }
	iv_ruleINSTRUCTION=ruleINSTRUCTION
	{ $current=$iv_ruleINSTRUCTION.current; }
	EOF;

// Rule INSTRUCTION
ruleINSTRUCTION returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getOpenParserRuleCall_0());
		}
		this_Open_0=ruleOpen
		{
			$current = $this_Open_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getGoToParserRuleCall_1());
		}
		this_GoTo_1=ruleGoTo
		{
			$current = $this_GoTo_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getVerifyParserRuleCall_2());
		}
		this_Verify_2=ruleVerify
		{
			$current = $this_Verify_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getClickParserRuleCall_3());
		}
		this_Click_3=ruleClick
		{
			$current = $this_Click_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getInsertParserRuleCall_4());
		}
		this_Insert_4=ruleInsert
		{
			$current = $this_Insert_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getUncheckParserRuleCall_5());
		}
		this_Uncheck_5=ruleUncheck
		{
			$current = $this_Uncheck_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getCheckParserRuleCall_6());
		}
		this_Check_6=ruleCheck
		{
			$current = $this_Check_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getChooseParserRuleCall_7());
		}
		this_Choose_7=ruleChoose
		{
			$current = $this_Choose_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getVariableParserRuleCall_8());
		}
		this_Variable_8=ruleVariable
		{
			$current = $this_Variable_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getReadParserRuleCall_9());
		}
		this_Read_9=ruleRead
		{
			$current = $this_Read_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getCountParserRuleCall_10());
		}
		this_Count_10=ruleCount
		{
			$current = $this_Count_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getPasteParserRuleCall_11());
		}
		this_Paste_11=rulePaste
		{
			$current = $this_Paste_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getForParserRuleCall_12());
		}
		this_For_12=ruleFor
		{
			$current = $this_For_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getEndForParserRuleCall_13());
		}
		this_EndFor_13=ruleEndFor
		{
			$current = $this_EndFor_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	iv_ruleOpen=ruleOpen
	{ $current=$iv_ruleOpen.current; }
	EOF;

// Rule Open
ruleOpen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Open'
		{
			newLeafNode(otherlv_0, grammarAccess.getOpenAccess().getOpenKeyword_0());
		}
		(
			(
				lv_browser_1_0=RULE_STRING
				{
					newLeafNode(lv_browser_1_0, grammarAccess.getOpenAccess().getBrowserSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpenRule());
					}
					setWithLastConsumed(
						$current,
						"browser",
						lv_browser_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleGoTo
entryRuleGoTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoToRule()); }
	iv_ruleGoTo=ruleGoTo
	{ $current=$iv_ruleGoTo.current; }
	EOF;

// Rule GoTo
ruleGoTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GoTo'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoToAccess().getGoToKeyword_0());
		}
		(
			(
				lv_url_1_0=RULE_STRING
				{
					newLeafNode(lv_url_1_0, grammarAccess.getGoToAccess().getUrlSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGoToRule());
					}
					setWithLastConsumed(
						$current,
						"url",
						lv_url_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleVerify
entryRuleVerify returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerifyRule()); }
	iv_ruleVerify=ruleVerify
	{ $current=$iv_ruleVerify.current; }
	EOF;

// Rule Verify
ruleVerify returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Verify'
		{
			newLeafNode(otherlv_0, grammarAccess.getVerifyAccess().getVerifyKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getVerifyAccess().getTYPE_VERIFYParserRuleCall_1());
		}
		this_TYPE_VERIFY_1=ruleTYPE_VERIFY
		{
			$current = $this_TYPE_VERIFY_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTYPE_VERIFY
entryRuleTYPE_VERIFY returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_VERIFYRule()); }
	iv_ruleTYPE_VERIFY=ruleTYPE_VERIFY
	{ $current=$iv_ruleTYPE_VERIFY.current; }
	EOF;

// Rule TYPE_VERIFY
ruleTYPE_VERIFY returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTYPE_VERIFYAccess().getContainsParserRuleCall_0());
		}
		this_Contains_0=ruleContains
		{
			$current = $this_Contains_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTYPE_VERIFYAccess().getEqualParserRuleCall_1());
		}
		this_Equal_1=ruleEqual
		{
			$current = $this_Equal_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContains
entryRuleContains returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainsRule()); }
	iv_ruleContains=ruleContains
	{ $current=$iv_ruleContains.current; }
	EOF;

// Rule Contains
ruleContains returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Contains'
		{
			newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getContainsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getTypeTYPE_CONTAINSParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTYPE_CONTAINS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_CONTAINS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0());
				}
				lv_parametre_2_0=ruleTYPE_PARAMETRE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"parametre",
						lv_parametre_2_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_PARAMETRE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE_CONTAINS
entryRuleTYPE_CONTAINS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_CONTAINSRule()); }
	iv_ruleTYPE_CONTAINS=ruleTYPE_CONTAINS
	{ $current=$iv_ruleTYPE_CONTAINS.current.getText(); }
	EOF;

// Rule TYPE_CONTAINS
ruleTYPE_CONTAINS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Text'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_CONTAINSAccess().getTextKeyword_0());
		}
		    |
		kw='Link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_CONTAINSAccess().getLinkKeyword_1());
		}
		    |
		kw='Image'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_CONTAINSAccess().getImageKeyword_2());
		}
	)
;

// Entry rule entryRuleTYPE_PARAMETRE
entryRuleTYPE_PARAMETRE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_PARAMETRERule()); }
	iv_ruleTYPE_PARAMETRE=ruleTYPE_PARAMETRE
	{ $current=$iv_ruleTYPE_PARAMETRE.current; }
	EOF;

// Rule TYPE_PARAMETRE
ruleTYPE_PARAMETRE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTYPE_PARAMETREAccess().getValueParserRuleCall_0());
		}
		this_Value_0=ruleValue
		{
			$current = $this_Value_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTYPE_PARAMETREAccess().getVarParserRuleCall_1());
		}
		this_Var_1=ruleVar
		{
			$current = $this_Var_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getVarAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_ID
				{
					newLeafNode(lv_value_1_0, grammarAccess.getVarAccess().getValueIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getVarAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Equal'
		{
			newLeafNode(otherlv_0, grammarAccess.getEqualAccess().getEqualKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEqualAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_var1_2_0=RULE_ID
				{
					newLeafNode(lv_var1_2_0, grammarAccess.getEqualAccess().getVar1IDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEqualRule());
					}
					setWithLastConsumed(
						$current,
						"var1",
						lv_var1_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEqualAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getEqualAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				lv_var2_5_0=RULE_ID
				{
					newLeafNode(lv_var2_5_0, grammarAccess.getEqualAccess().getVar2IDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEqualRule());
					}
					setWithLastConsumed(
						$current,
						"var2",
						lv_var2_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getEqualAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	iv_ruleClick=ruleClick
	{ $current=$iv_ruleClick.current; }
	EOF;

// Rule Click
ruleClick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Click'
		{
			newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClickAccess().getTypeTYPE_CLICKParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTYPE_CLICK
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClickRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_CLICK");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClickAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0());
				}
				lv_parametre_2_0=ruleTYPE_PARAMETRE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClickRule());
					}
					set(
						$current,
						"parametre",
						lv_parametre_2_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_PARAMETRE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE_CLICK
entryRuleTYPE_CLICK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_CLICKRule()); }
	iv_ruleTYPE_CLICK=ruleTYPE_CLICK
	{ $current=$iv_ruleTYPE_CLICK.current.getText(); }
	EOF;

// Rule TYPE_CLICK
ruleTYPE_CLICK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_CLICKAccess().getLinkKeyword_0());
		}
		    |
		kw='Button'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_CLICKAccess().getButtonKeyword_1());
		}
		    |
		kw='Image'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_CLICKAccess().getImageKeyword_2());
		}
	)
;

// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current; }
	EOF;

// Rule Insert
ruleInsert returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Insert'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getInsertKeyword_0());
		}
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getInsertAccess().getInKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getTypeTYPE_INSERTParserRuleCall_2_0());
				}
				lv_type_2_0=ruleTYPE_INSERT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_INSERT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_3_0=RULE_STRING
				{
					newLeafNode(lv_name_3_0, grammarAccess.getInsertAccess().getNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInsertRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getInsertAccess().getWithKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getParametreTYPE_PARAMETREParserRuleCall_5_0());
				}
				lv_parametre_5_0=ruleTYPE_PARAMETRE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"parametre",
						lv_parametre_5_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_PARAMETRE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE_INSERT
entryRuleTYPE_INSERT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_INSERTRule()); }
	iv_ruleTYPE_INSERT=ruleTYPE_INSERT
	{ $current=$iv_ruleTYPE_INSERT.current.getText(); }
	EOF;

// Rule TYPE_INSERT
ruleTYPE_INSERT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='SearchField'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTYPE_INSERTAccess().getSearchFieldKeyword());
	}
;

// Entry rule entryRuleUncheck
entryRuleUncheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUncheckRule()); }
	iv_ruleUncheck=ruleUncheck
	{ $current=$iv_ruleUncheck.current; }
	EOF;

// Rule Uncheck
ruleUncheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Uncheck'
		{
			newLeafNode(otherlv_0, grammarAccess.getUncheckAccess().getUncheckKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUncheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTYPE_CHECK_UNCHECK
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUncheckRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_CHECK_UNCHECK");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE_CHECK_UNCHECK
entryRuleTYPE_CHECK_UNCHECK returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_CHECK_UNCHECKRule()); }
	iv_ruleTYPE_CHECK_UNCHECK=ruleTYPE_CHECK_UNCHECK
	{ $current=$iv_ruleTYPE_CHECK_UNCHECK.current; }
	EOF;

// Rule TYPE_CHECK_UNCHECK
ruleTYPE_CHECK_UNCHECK returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='all'
		{
			newLeafNode(otherlv_0, grammarAccess.getTYPE_CHECK_UNCHECKAccess().getAllKeyword_0());
		}
		    |
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getTYPE_CHECK_UNCHECKAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					lv_tableau_2_0=RULE_STRING
					{
						newLeafNode(lv_tableau_2_0, grammarAccess.getTYPE_CHECK_UNCHECKAccess().getTableauSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTYPE_CHECK_UNCHECKRule());
						}
						addWithLastConsumed(
							$current,
							"tableau",
							lv_tableau_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)*
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getTYPE_CHECK_UNCHECKAccess().getRightSquareBracketKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	iv_ruleCheck=ruleCheck
	{ $current=$iv_ruleCheck.current; }
	EOF;

// Rule Check
ruleCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Check'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTYPE_CHECK_UNCHECK
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_CHECK_UNCHECK");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChoose
entryRuleChoose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChooseRule()); }
	iv_ruleChoose=ruleChoose
	{ $current=$iv_ruleChoose.current; }
	EOF;

// Rule Choose
ruleChoose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Choose'
		{
			newLeafNode(otherlv_0, grammarAccess.getChooseAccess().getChooseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChooseAccess().getTypeTYPE_CHOOSEParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTYPE_CHOOSE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChooseRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_CHOOSE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_parametre_2_0=RULE_STRING
				{
					newLeafNode(lv_parametre_2_0, grammarAccess.getChooseAccess().getParametreSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChooseRule());
					}
					setWithLastConsumed(
						$current,
						"parametre",
						lv_parametre_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getChooseAccess().getInKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_STRING
				{
					newLeafNode(lv_name_4_0, grammarAccess.getChooseAccess().getNameSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChooseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE_CHOOSE
entryRuleTYPE_CHOOSE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_CHOOSERule()); }
	iv_ruleTYPE_CHOOSE=ruleTYPE_CHOOSE
	{ $current=$iv_ruleTYPE_CHOOSE.current.getText(); }
	EOF;

// Rule TYPE_CHOOSE
ruleTYPE_CHOOSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Box'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTYPE_CHOOSEAccess().getBoxKeyword());
	}
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getInstructionTYPE_INSTRUCTIONParserRuleCall_2_0());
				}
				lv_instruction_2_0=ruleTYPE_INSTRUCTION
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"instruction",
						lv_instruction_2_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_INSTRUCTION");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE_INSTRUCTION
entryRuleTYPE_INSTRUCTION returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_INSTRUCTIONRule()); }
	iv_ruleTYPE_INSTRUCTION=ruleTYPE_INSTRUCTION
	{ $current=$iv_ruleTYPE_INSTRUCTION.current; }
	EOF;

// Rule TYPE_INSTRUCTION
ruleTYPE_INSTRUCTION returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTYPE_INSTRUCTIONAccess().getReadParserRuleCall_0());
		}
		this_Read_0=ruleRead
		{
			$current = $this_Read_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTYPE_INSTRUCTIONAccess().getCountParserRuleCall_1());
		}
		this_Count_1=ruleCount
		{
			$current = $this_Count_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRead
entryRuleRead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadRule()); }
	iv_ruleRead=ruleRead
	{ $current=$iv_ruleRead.current; }
	EOF;

// Rule Read
ruleRead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Read'
		{
			newLeafNode(otherlv_0, grammarAccess.getReadAccess().getReadKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReadAccess().getTypeTYPE_READParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTYPE_READ
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReadRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_READ");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of Element '
		{
			newLeafNode(otherlv_2, grammarAccess.getReadAccess().getOfElementKeyword_2());
		}
		(
			(
				lv_parametre_3_0=RULE_STRING
				{
					newLeafNode(lv_parametre_3_0, grammarAccess.getReadAccess().getParametreSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReadRule());
					}
					setWithLastConsumed(
						$current,
						"parametre",
						lv_parametre_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE_READ
entryRuleTYPE_READ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_READRule()); }
	iv_ruleTYPE_READ=ruleTYPE_READ
	{ $current=$iv_ruleTYPE_READ.current.getText(); }
	EOF;

// Rule TYPE_READ
ruleTYPE_READ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_READAccess().getLinkKeyword_0());
		}
		    |
		kw='Title'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPE_READAccess().getTitleKeyword_1());
		}
	)
;

// Entry rule entryRuleCount
entryRuleCount returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountRule()); }
	iv_ruleCount=ruleCount
	{ $current=$iv_ruleCount.current; }
	EOF;

// Rule Count
ruleCount returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Count of Element '
		{
			newLeafNode(otherlv_0, grammarAccess.getCountAccess().getCountOfElementKeyword_0());
		}
		(
			(
				lv_parametre_1_0=RULE_STRING
				{
					newLeafNode(lv_parametre_1_0, grammarAccess.getCountAccess().getParametreSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountRule());
					}
					setWithLastConsumed(
						$current,
						"parametre",
						lv_parametre_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulePaste
entryRulePaste returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPasteRule()); }
	iv_rulePaste=rulePaste
	{ $current=$iv_rulePaste.current; }
	EOF;

// Rule Paste
rulePaste returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Paste'
		{
			newLeafNode(otherlv_0, grammarAccess.getPasteAccess().getPasteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPasteAccess().getTypeTYPE_PASTEParserRuleCall_1_0());
				}
				lv_type_1_0=ruleTYPE_PASTE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPasteRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.browser.mydsl.MyDsl.TYPE_PASTE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPasteAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_parametre_3_0=RULE_ID
				{
					newLeafNode(lv_parametre_3_0, grammarAccess.getPasteAccess().getParametreIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPasteRule());
					}
					setWithLastConsumed(
						$current,
						"parametre",
						lv_parametre_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPasteAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleTYPE_PASTE
entryRuleTYPE_PASTE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_PASTERule()); }
	iv_ruleTYPE_PASTE=ruleTYPE_PASTE
	{ $current=$iv_ruleTYPE_PASTE.current.getText(); }
	EOF;

// Rule TYPE_PASTE
ruleTYPE_PASTE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='SearchField'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTYPE_PASTEAccess().getSearchFieldKeyword());
	}
;

// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRule()); }
	iv_ruleFor=ruleFor
	{ $current=$iv_ruleFor.current; }
	EOF;

// Rule For
ruleFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='For'
		{
			newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getForAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getForAccess().getEqualsSignKeyword_2());
		}
		otherlv_3='['
		{
			newLeafNode(otherlv_3, grammarAccess.getForAccess().getLeftSquareBracketKeyword_3());
		}
		(
			(
				lv_tableau_4_0=RULE_STRING
				{
					newLeafNode(lv_tableau_4_0, grammarAccess.getForAccess().getTableauSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForRule());
					}
					addWithLastConsumed(
						$current,
						"tableau",
						lv_tableau_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getForAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEndFor
entryRuleEndFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndForRule()); }
	iv_ruleEndFor=ruleEndFor
	{ $current=$iv_ruleEndFor.current; }
	EOF;

// Rule EndFor
ruleEndFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='EndFor'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndForAccess().getEndForKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEndForAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndForRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
