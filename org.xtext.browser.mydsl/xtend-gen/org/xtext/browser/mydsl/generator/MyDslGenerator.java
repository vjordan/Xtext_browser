/**
 * generated by Xtext 2.15.0
 */
package org.xtext.browser.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.browser.mydsl.myDsl.Check;
import org.xtext.browser.mydsl.myDsl.Choose;
import org.xtext.browser.mydsl.myDsl.Click;
import org.xtext.browser.mydsl.myDsl.Contains;
import org.xtext.browser.mydsl.myDsl.Count;
import org.xtext.browser.mydsl.myDsl.EndFor;
import org.xtext.browser.mydsl.myDsl.Equal;
import org.xtext.browser.mydsl.myDsl.For;
import org.xtext.browser.mydsl.myDsl.GoTo;
import org.xtext.browser.mydsl.myDsl.INSTRUCTION;
import org.xtext.browser.mydsl.myDsl.Insert;
import org.xtext.browser.mydsl.myDsl.Open;
import org.xtext.browser.mydsl.myDsl.Read;
import org.xtext.browser.mydsl.myDsl.TYPE_CHECK_UNCHECK;
import org.xtext.browser.mydsl.myDsl.TYPE_INSTRUCTION;
import org.xtext.browser.mydsl.myDsl.Test;
import org.xtext.browser.mydsl.myDsl.Uncheck;
import org.xtext.browser.mydsl.myDsl.Variable;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Test> _filter = Iterables.<Test>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Test.class);
    for (final Test t : _filter) {
      String _number = t.getNumber();
      String _plus = ("Main" + _number);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.compile(t));
    }
  }
  
  public CharSequence compile(final Test t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.JavascriptExecutor;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.support.ui.Select;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Main");
    String _number = t.getNumber();
    _builder.append(_number);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Test");
    String _number_1 = t.getNumber();
    _builder.append(_number_1, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    {
      EList<INSTRUCTION> _body = t.getBody();
      for(final INSTRUCTION i : _body) {
        _builder.append("\t\t");
        CharSequence _compile = this.compile(i, t.getBody().indexOf(i));
        _builder.append(_compile, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final INSTRUCTION i, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _simpleName = i.getClass().getSimpleName();
      boolean _equals = Objects.equal(_simpleName, "OpenImpl");
      if (_equals) {
        CharSequence _compile = this.compile(((Open) i), index);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_1 = i.getClass().getSimpleName();
      boolean _equals_1 = Objects.equal(_simpleName_1, "GoToImpl");
      if (_equals_1) {
        CharSequence _compile_1 = this.compile(((GoTo) i), index);
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_2 = i.getClass().getSimpleName();
      boolean _equals_2 = Objects.equal(_simpleName_2, "ContainsImpl");
      if (_equals_2) {
        CharSequence _compile_2 = this.compile(((Contains) i), index);
        _builder.append(_compile_2);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_3 = i.getClass().getSimpleName();
      boolean _equals_3 = Objects.equal(_simpleName_3, "ClickImpl");
      if (_equals_3) {
        CharSequence _compile_3 = this.compile(((Click) i), index);
        _builder.append(_compile_3);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_4 = i.getClass().getSimpleName();
      boolean _equals_4 = Objects.equal(_simpleName_4, "InsertImpl");
      if (_equals_4) {
        CharSequence _compile_4 = this.compile(((Insert) i), index);
        _builder.append(_compile_4);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_5 = i.getClass().getSimpleName();
      boolean _equals_5 = Objects.equal(_simpleName_5, "EqualImpl");
      if (_equals_5) {
        CharSequence _compile_5 = this.compile(((Equal) i), index);
        _builder.append(_compile_5);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_6 = i.getClass().getSimpleName();
      boolean _equals_6 = Objects.equal(_simpleName_6, "UncheckImpl");
      if (_equals_6) {
        CharSequence _compile_6 = this.compile(((Uncheck) i), index);
        _builder.append(_compile_6);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_7 = i.getClass().getSimpleName();
      boolean _equals_7 = Objects.equal(_simpleName_7, "CheckImpl");
      if (_equals_7) {
        CharSequence _compile_7 = this.compile(((Check) i), index);
        _builder.append(_compile_7);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_8 = i.getClass().getSimpleName();
      boolean _equals_8 = Objects.equal(_simpleName_8, "ChooseImpl");
      if (_equals_8) {
        CharSequence _compile_8 = this.compile(((Choose) i), index);
        _builder.append(_compile_8);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_9 = i.getClass().getSimpleName();
      boolean _equals_9 = Objects.equal(_simpleName_9, "VariableImpl");
      if (_equals_9) {
        CharSequence _compile_9 = this.compile(((Variable) i), index);
        _builder.append(_compile_9);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_10 = i.getClass().getSimpleName();
      boolean _equals_10 = Objects.equal(_simpleName_10, "ForImpl");
      if (_equals_10) {
        CharSequence _compile_10 = this.compile(((For) i), index);
        _builder.append(_compile_10);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_11 = i.getClass().getSimpleName();
      boolean _equals_11 = Objects.equal(_simpleName_11, "EndForImpl");
      if (_equals_11) {
        CharSequence _compile_11 = this.compile(((EndFor) i), index);
        _builder.append(_compile_11);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Open o, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Open\");");
    _builder.newLine();
    _builder.append("System.setProperty(\"webdriver.chrome.driver\", \"C:/Users/JORDAN/Langages dédiés/workspaces/Projet/chromedriver.exe\");");
    _builder.newLine();
    _builder.append("WebDriver driver = new ChromeDriver();");
    _builder.newLine();
    _builder.append("JavascriptExecutor jse = ((JavascriptExecutor)driver);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GoTo i, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"GoTo\");");
    _builder.newLine();
    _builder.append("driver.get(\"");
    String _url = i.getUrl();
    _builder.append(_url);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Contains c, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Contains\");");
    _builder.newLine();
    {
      String _type = c.getType();
      boolean _equals = Objects.equal(_type, "Link");
      if (_equals) {
        _builder.append("//");
        String _type_1 = c.getType();
        _builder.append(_type_1);
        _builder.newLineIfNotEmpty();
        _builder.append("ArrayList<WebElement> linkContains");
        _builder.append(index);
        _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//a[contains(@title,\'\" + \"");
        String _value = c.getParametre().getValue();
        _builder.append(_value);
        _builder.append("\" + \"\')]\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("boolean containsLink");
        _builder.append(index);
        _builder.append(" = (linkContains");
        _builder.append(index);
        _builder.append(".size() >= 1);");
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.println(containsLink");
        _builder.append(index);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _type_2 = c.getType();
      boolean _equals_1 = Objects.equal(_type_2, "Text");
      if (_equals_1) {
        _builder.append("//");
        String _type_3 = c.getType();
        _builder.append(_type_3);
        _builder.newLineIfNotEmpty();
        _builder.append("ArrayList<WebElement> textContains");
        _builder.append(index);
        _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//*[contains(text(),\'");
        String _value_1 = c.getParametre().getValue();
        _builder.append(_value_1);
        _builder.append("\')]\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("boolean containsText");
        _builder.append(index);
        _builder.append(" = (textContains");
        _builder.append(index);
        _builder.append(".size() >= 1);");
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.println(containsText");
        _builder.append(index);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Click c, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Click\");");
    _builder.newLine();
    {
      String _type = c.getType();
      boolean _equals = Objects.equal(_type, "Link");
      if (_equals) {
        _builder.append("//");
        String _type_1 = c.getType();
        _builder.append(_type_1);
        _builder.newLineIfNotEmpty();
        {
          String _simpleName = c.getParametre().getClass().getSimpleName();
          boolean _equals_1 = Objects.equal(_simpleName, "VarImpl");
          if (_equals_1) {
            _builder.append("ArrayList<WebElement> linkClick");
            _builder.append(index);
            _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//a[contains(text(),\\\"\"+ ");
            String _value = c.getParametre().getValue();
            _builder.append(_value);
            _builder.append(" +\"\\\")]\"));");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _simpleName_1 = c.getParametre().getClass().getSimpleName();
          boolean _equals_2 = Objects.equal(_simpleName_1, "ValueImpl");
          if (_equals_2) {
            _builder.append("ArrayList<WebElement> linkClick");
            _builder.append(index);
            _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//a[contains(@title,\'\" + \"");
            String _value_1 = c.getParametre().getValue();
            _builder.append(_value_1);
            _builder.append("\" + \"\')]\"));");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("if((linkClick");
        _builder.append(index);
        _builder.append(".size() >= 1)){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("jse.executeScript(\"window.scrollTo(\" + linkClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getLocation().x + \", \" + (linkClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getLocation().y - linkClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getRect().height * 3) + \")\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("linkClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).click();");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      String _type_2 = c.getType();
      boolean _equals_3 = Objects.equal(_type_2, "Image");
      if (_equals_3) {
        _builder.append("//");
        String _type_3 = c.getType();
        _builder.append(_type_3);
        _builder.newLineIfNotEmpty();
        _builder.append("ArrayList<WebElement> imageClick");
        _builder.append(index);
        _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//img[contains(@alt,\'\" + \"");
        String _value_2 = c.getParametre().getValue();
        _builder.append(_value_2);
        _builder.append("\" + \"\')]\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("if((imageClick");
        _builder.append(index);
        _builder.append(".size() >= 1)){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("jse.executeScript(\"window.scrollTo(\" + imageClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getLocation().x + \", \" + (imageClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getLocation().y - imageClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getRect().height * 3) + \")\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("imageClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).click();");
        _builder.newLineIfNotEmpty();
        _builder.append("}else{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("imageClick");
        _builder.append(index, "\t");
        _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//a[contains(@title,\'\" + \"");
        String _value_3 = c.getParametre().getValue();
        _builder.append(_value_3, "\t");
        _builder.append("\" + \"\')]\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("if((imageClick");
        _builder.append(index, "\t");
        _builder.append(".size() >= 1)){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("jse.executeScript(\"window.scrollTo(\" + imageClick");
        _builder.append(index, "\t\t");
        _builder.append(".get(0).getLocation().x + \", \" + (imageClick");
        _builder.append(index, "\t\t");
        _builder.append(".get(0).getLocation().y - imageClick");
        _builder.append(index, "\t\t");
        _builder.append(".get(0).getRect().height * 3) + \")\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("imageClick");
        _builder.append(index, "\t\t");
        _builder.append(".get(0).click();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      String _type_4 = c.getType();
      boolean _equals_4 = Objects.equal(_type_4, "Button");
      if (_equals_4) {
        _builder.append("//");
        String _type_5 = c.getType();
        _builder.append(_type_5);
        _builder.newLineIfNotEmpty();
        _builder.append("ArrayList<WebElement> buttonClick");
        _builder.append(index);
        _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//input[contains(@value,\'\" + \"");
        String _value_4 = c.getParametre().getValue();
        _builder.append(_value_4);
        _builder.append("\" + \"\')]\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("if((buttonClick");
        _builder.append(index);
        _builder.append(".size() >= 1)){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("jse.executeScript(\"window.scrollTo(\" + buttonClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getLocation().x + \", \" + (buttonClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getLocation().y - buttonClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).getRect().height * 3) + \")\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("buttonClick");
        _builder.append(index, "\t");
        _builder.append(".get(0).click();");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Insert i, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Insert\");");
    _builder.newLine();
    _builder.append("ArrayList<WebElement> searchInsert");
    _builder.append(index);
    _builder.append(" = (ArrayList<WebElement>)  driver.findElements(By.xpath(\"//input[contains(@name,\'\" + \"");
    String _name = i.getName();
    _builder.append(_name);
    _builder.append("\" + \"\')]\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("if((searchInsert");
    _builder.append(index);
    _builder.append(".size() >= 1)){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("jse.executeScript(\"window.scrollTo(\" + searchInsert");
    _builder.append(index, "\t");
    _builder.append(".get(0).getLocation().x + \", \" + (searchInsert");
    _builder.append(index, "\t");
    _builder.append(".get(0).getLocation().y - searchInsert");
    _builder.append(index, "\t");
    _builder.append(".get(0).getRect().height * 3) + \")\");");
    _builder.newLineIfNotEmpty();
    {
      String _simpleName = i.getParametre().getClass().getSimpleName();
      boolean _equals = Objects.equal(_simpleName, "VarImpl");
      if (_equals) {
        _builder.append("\t");
        _builder.append("searchInsert");
        _builder.append(index, "\t");
        _builder.append(".get(0).sendKeys(");
        String _value = i.getParametre().getValue();
        _builder.append(_value, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_1 = i.getParametre().getClass().getSimpleName();
      boolean _equals_1 = Objects.equal(_simpleName_1, "ValueImpl");
      if (_equals_1) {
        _builder.append("\t");
        _builder.append("searchInsert");
        _builder.append(index, "\t");
        _builder.append(".get(0).sendKeys(\"");
        String _value_1 = i.getParametre().getValue();
        _builder.append(_value_1, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Equal e, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Equal\");");
    _builder.newLine();
    _builder.append("System.out.println(");
    String _var1 = e.getVar1();
    _builder.append(_var1);
    _builder.append(" == ");
    String _var2 = e.getVar2();
    _builder.append(_var2);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Uncheck u, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Uncheck\");");
    _builder.newLine();
    {
      TYPE_CHECK_UNCHECK _type = u.getType();
      boolean _equals = Objects.equal(_type, "all");
      if (_equals) {
        _builder.append("System.out.println(\"Uncheck all\");");
        _builder.newLine();
        _builder.append("ArrayList<WebElement> checkboxs");
        _builder.append(index);
        _builder.append(" = (ArrayList<WebElement>) driver.findElements(By.cssSelector(\"input:checked[type=\'checkbox\']\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("for(WebElement element : checkboxs");
        _builder.append(index);
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("element.click();");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Check c, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Check\");");
    _builder.newLine();
    {
      TYPE_CHECK_UNCHECK _type = c.getType();
      boolean _equals = Objects.equal(_type, "all");
      if (_equals) {
        _builder.append("System.out.println(\"Check all\");");
        _builder.newLine();
        _builder.append("ArrayList<WebElement> checkboxs");
        _builder.append(index);
        _builder.append(" = (ArrayList<WebElement>) driver.findElements(By.cssSelector(\"input:not(:checked)[type=\'checkbox\']\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("for(WebElement element : checkboxs");
        _builder.append(index);
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("element.click();");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      String _simpleName = c.getType().getClass().getSimpleName();
      boolean _equals_1 = Objects.equal(_simpleName, "TYPE_CHECK_UNCHECKImpl");
      if (_equals_1) {
        _builder.append("System.out.println(\"Check tab\");");
        _builder.newLine();
        {
          EList<String> _tableau = c.getType().getTableau();
          for(final String box : _tableau) {
            _builder.append("ArrayList<WebElement> label");
            _builder.append(index);
            int _indexOf = c.getType().getTableau().indexOf(box);
            _builder.append(_indexOf);
            _builder.append(" = (ArrayList<WebElement>) driver.findElements(By.xpath(\"//label[contains(text(),\'");
            _builder.append(box);
            _builder.append("\')]\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("jse.executeScript(\"window.scrollTo(\" + label");
            _builder.append(index);
            int _indexOf_1 = c.getType().getTableau().indexOf(box);
            _builder.append(_indexOf_1);
            _builder.append(".get(0).getLocation().x + \", \" + (label");
            _builder.append(index);
            int _indexOf_2 = c.getType().getTableau().indexOf(box);
            _builder.append(_indexOf_2);
            _builder.append(".get(0).getLocation().y - label");
            _builder.append(index);
            int _indexOf_3 = c.getType().getTableau().indexOf(box);
            _builder.append(_indexOf_3);
            _builder.append(".get(0).getRect().height * 3) + \")\");");
            _builder.newLineIfNotEmpty();
            _builder.append("ArrayList<WebElement> checkbox");
            _builder.append(index);
            int _indexOf_4 = c.getType().getTableau().indexOf(box);
            _builder.append(_indexOf_4);
            _builder.append(" = (ArrayList<WebElement>) driver.findElements(By.xpath(\"//input[contains(@id,\'\" + label");
            _builder.append(index);
            int _indexOf_5 = c.getType().getTableau().indexOf(box);
            _builder.append(_indexOf_5);
            _builder.append(".get(0).getAttribute(\"id\") + \"\')]\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("checkbox");
            _builder.append(index);
            int _indexOf_6 = c.getType().getTableau().indexOf(box);
            _builder.append(_indexOf_6);
            _builder.append(".get(0).click();");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Choose c, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Choose\");");
    _builder.newLine();
    _builder.append("Select choose");
    _builder.append(index);
    _builder.append(" = new Select(driver.findElement(By.xpath(\"//select[contains(@name,\'\" + \"");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append("\" + \"\')]\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("choose");
    _builder.append(index);
    _builder.append(".selectByVisibleText(\"");
    String _parametre = c.getParametre();
    _builder.append(_parametre);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Variable v, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Variable\");");
    _builder.newLine();
    {
      String _simpleName = v.getInstruction().getClass().getSimpleName();
      boolean _equals = Objects.equal(_simpleName, "ReadImpl");
      if (_equals) {
        _builder.append("System.out.println(\"Read\");");
        _builder.newLine();
        _builder.append("String ");
        String _name = v.getName();
        _builder.append(_name);
        _builder.append(" = ");
        TYPE_INSTRUCTION _instruction = v.getInstruction();
        CharSequence _compile = this.compile(((Read) _instruction), index);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.println(");
        String _name_1 = v.getName();
        _builder.append(_name_1);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _simpleName_1 = v.getInstruction().getClass().getSimpleName();
      boolean _equals_1 = Objects.equal(_simpleName_1, "CountImpl");
      if (_equals_1) {
        _builder.append("System.out.println(\"Count\");");
        _builder.newLine();
        _builder.append("int ");
        String _name_2 = v.getName();
        _builder.append(_name_2);
        _builder.append(" = ");
        TYPE_INSTRUCTION _instruction_1 = v.getInstruction();
        CharSequence _compile_1 = this.compile(((Count) _instruction_1), index);
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.println(");
        String _name_3 = v.getName();
        _builder.append(_name_3);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Read r, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _type = r.getType();
      boolean _equals = Objects.equal(_type, "Title");
      if (_equals) {
        _builder.append("driver.findElement(By.xpath(\"//*[contains(@class,\'\" + \"");
        String _parametre = r.getParametre();
        _builder.append(_parametre);
        _builder.append("\" + \"\')]\")).getAttribute(\"title\");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _type_1 = r.getType();
      boolean _equals_1 = Objects.equal(_type_1, "Link");
      if (_equals_1) {
        _builder.append("driver.findElement(By.xpath(\"//*[contains(@class,\'\" + \"");
        String _parametre_1 = r.getParametre();
        _builder.append(_parametre_1);
        _builder.append("\" + \"\')]\")).getAttribute(\"href\");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Count c, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("((ArrayList<WebElement>)  driver.findElements(By.xpath(\"//*[contains(@class,\'\" + \"");
    String _parametre = c.getParametre();
    _builder.append(_parametre);
    _builder.append("\" + \"\')]\"))).size();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final For f, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ArrayList<String> links = new ArrayList<String>();");
    _builder.newLine();
    {
      EList<String> _tableau = f.getTableau();
      for(final String value : _tableau) {
        _builder.append("links.add(\"");
        _builder.append(value);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("for(String ");
    String _name = f.getName();
    _builder.append(_name);
    _builder.append(" : links){");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final EndFor e, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"End For\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
