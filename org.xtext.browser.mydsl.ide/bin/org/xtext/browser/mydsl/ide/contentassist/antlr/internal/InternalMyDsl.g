/*
 * generated by Xtext 2.15.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.browser.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.browser.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.browser.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTest
entryRuleTest
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestAccess().getGroup()); }
		(rule__Test__Group__0)
		{ after(grammarAccess.getTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleINSTRUCTION
entryRuleINSTRUCTION
:
{ before(grammarAccess.getINSTRUCTIONRule()); }
	 ruleINSTRUCTION
{ after(grammarAccess.getINSTRUCTIONRule()); } 
	 EOF 
;

// Rule INSTRUCTION
ruleINSTRUCTION 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getAlternatives()); }
		(rule__INSTRUCTION__Alternatives)
		{ after(grammarAccess.getINSTRUCTIONAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpen
entryRuleOpen
:
{ before(grammarAccess.getOpenRule()); }
	 ruleOpen
{ after(grammarAccess.getOpenRule()); } 
	 EOF 
;

// Rule Open
ruleOpen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpenAccess().getGroup()); }
		(rule__Open__Group__0)
		{ after(grammarAccess.getOpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoTo
entryRuleGoTo
:
{ before(grammarAccess.getGoToRule()); }
	 ruleGoTo
{ after(grammarAccess.getGoToRule()); } 
	 EOF 
;

// Rule GoTo
ruleGoTo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoToAccess().getGroup()); }
		(rule__GoTo__Group__0)
		{ after(grammarAccess.getGoToAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerify
entryRuleVerify
:
{ before(grammarAccess.getVerifyRule()); }
	 ruleVerify
{ after(grammarAccess.getVerifyRule()); } 
	 EOF 
;

// Rule Verify
ruleVerify 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerifyAccess().getGroup()); }
		(rule__Verify__Group__0)
		{ after(grammarAccess.getVerifyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_VERIFY
entryRuleTYPE_VERIFY
:
{ before(grammarAccess.getTYPE_VERIFYRule()); }
	 ruleTYPE_VERIFY
{ after(grammarAccess.getTYPE_VERIFYRule()); } 
	 EOF 
;

// Rule TYPE_VERIFY
ruleTYPE_VERIFY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_VERIFYAccess().getAlternatives()); }
		(rule__TYPE_VERIFY__Alternatives)
		{ after(grammarAccess.getTYPE_VERIFYAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContains
entryRuleContains
:
{ before(grammarAccess.getContainsRule()); }
	 ruleContains
{ after(grammarAccess.getContainsRule()); } 
	 EOF 
;

// Rule Contains
ruleContains 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainsAccess().getGroup()); }
		(rule__Contains__Group__0)
		{ after(grammarAccess.getContainsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_CONTAINS
entryRuleTYPE_CONTAINS
:
{ before(grammarAccess.getTYPE_CONTAINSRule()); }
	 ruleTYPE_CONTAINS
{ after(grammarAccess.getTYPE_CONTAINSRule()); } 
	 EOF 
;

// Rule TYPE_CONTAINS
ruleTYPE_CONTAINS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_CONTAINSAccess().getAlternatives()); }
		(rule__TYPE_CONTAINS__Alternatives)
		{ after(grammarAccess.getTYPE_CONTAINSAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_PARAMETRE
entryRuleTYPE_PARAMETRE
:
{ before(grammarAccess.getTYPE_PARAMETRERule()); }
	 ruleTYPE_PARAMETRE
{ after(grammarAccess.getTYPE_PARAMETRERule()); } 
	 EOF 
;

// Rule TYPE_PARAMETRE
ruleTYPE_PARAMETRE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_PARAMETREAccess().getAlternatives()); }
		(rule__TYPE_PARAMETRE__Alternatives)
		{ after(grammarAccess.getTYPE_PARAMETREAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getValueAssignment()); }
		(rule__Value__ValueAssignment)
		{ after(grammarAccess.getValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVar
entryRuleVar
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAccess().getGroup()); }
		(rule__Var__Group__0)
		{ after(grammarAccess.getVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqual
entryRuleEqual
:
{ before(grammarAccess.getEqualRule()); }
	 ruleEqual
{ after(grammarAccess.getEqualRule()); } 
	 EOF 
;

// Rule Equal
ruleEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualAccess().getGroup()); }
		(rule__Equal__Group__0)
		{ after(grammarAccess.getEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClick
entryRuleClick
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickAccess().getGroup()); }
		(rule__Click__Group__0)
		{ after(grammarAccess.getClickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_CLICK
entryRuleTYPE_CLICK
:
{ before(grammarAccess.getTYPE_CLICKRule()); }
	 ruleTYPE_CLICK
{ after(grammarAccess.getTYPE_CLICKRule()); } 
	 EOF 
;

// Rule TYPE_CLICK
ruleTYPE_CLICK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_CLICKAccess().getAlternatives()); }
		(rule__TYPE_CLICK__Alternatives)
		{ after(grammarAccess.getTYPE_CLICKAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getGroup()); }
		(rule__Insert__Group__0)
		{ after(grammarAccess.getInsertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_INSERT
entryRuleTYPE_INSERT
:
{ before(grammarAccess.getTYPE_INSERTRule()); }
	 ruleTYPE_INSERT
{ after(grammarAccess.getTYPE_INSERTRule()); } 
	 EOF 
;

// Rule TYPE_INSERT
ruleTYPE_INSERT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_INSERTAccess().getSearchFieldKeyword()); }
		'SearchField'
		{ after(grammarAccess.getTYPE_INSERTAccess().getSearchFieldKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUncheck
entryRuleUncheck
:
{ before(grammarAccess.getUncheckRule()); }
	 ruleUncheck
{ after(grammarAccess.getUncheckRule()); } 
	 EOF 
;

// Rule Uncheck
ruleUncheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUncheckAccess().getGroup()); }
		(rule__Uncheck__Group__0)
		{ after(grammarAccess.getUncheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_CHECK_UNCHECK
entryRuleTYPE_CHECK_UNCHECK
:
{ before(grammarAccess.getTYPE_CHECK_UNCHECKRule()); }
	 ruleTYPE_CHECK_UNCHECK
{ after(grammarAccess.getTYPE_CHECK_UNCHECKRule()); } 
	 EOF 
;

// Rule TYPE_CHECK_UNCHECK
ruleTYPE_CHECK_UNCHECK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getAlternatives()); }
		(rule__TYPE_CHECK_UNCHECK__Alternatives)
		{ after(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheck
entryRuleCheck
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckAccess().getGroup()); }
		(rule__Check__Group__0)
		{ after(grammarAccess.getCheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChoose
entryRuleChoose
:
{ before(grammarAccess.getChooseRule()); }
	 ruleChoose
{ after(grammarAccess.getChooseRule()); } 
	 EOF 
;

// Rule Choose
ruleChoose 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChooseAccess().getGroup()); }
		(rule__Choose__Group__0)
		{ after(grammarAccess.getChooseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_CHOOSE
entryRuleTYPE_CHOOSE
:
{ before(grammarAccess.getTYPE_CHOOSERule()); }
	 ruleTYPE_CHOOSE
{ after(grammarAccess.getTYPE_CHOOSERule()); } 
	 EOF 
;

// Rule TYPE_CHOOSE
ruleTYPE_CHOOSE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_CHOOSEAccess().getBoxKeyword()); }
		'Box'
		{ after(grammarAccess.getTYPE_CHOOSEAccess().getBoxKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_INSTRUCTION
entryRuleTYPE_INSTRUCTION
:
{ before(grammarAccess.getTYPE_INSTRUCTIONRule()); }
	 ruleTYPE_INSTRUCTION
{ after(grammarAccess.getTYPE_INSTRUCTIONRule()); } 
	 EOF 
;

// Rule TYPE_INSTRUCTION
ruleTYPE_INSTRUCTION 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_INSTRUCTIONAccess().getAlternatives()); }
		(rule__TYPE_INSTRUCTION__Alternatives)
		{ after(grammarAccess.getTYPE_INSTRUCTIONAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRead
entryRuleRead
:
{ before(grammarAccess.getReadRule()); }
	 ruleRead
{ after(grammarAccess.getReadRule()); } 
	 EOF 
;

// Rule Read
ruleRead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadAccess().getGroup()); }
		(rule__Read__Group__0)
		{ after(grammarAccess.getReadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_READ
entryRuleTYPE_READ
:
{ before(grammarAccess.getTYPE_READRule()); }
	 ruleTYPE_READ
{ after(grammarAccess.getTYPE_READRule()); } 
	 EOF 
;

// Rule TYPE_READ
ruleTYPE_READ 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_READAccess().getAlternatives()); }
		(rule__TYPE_READ__Alternatives)
		{ after(grammarAccess.getTYPE_READAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCount
entryRuleCount
:
{ before(grammarAccess.getCountRule()); }
	 ruleCount
{ after(grammarAccess.getCountRule()); } 
	 EOF 
;

// Rule Count
ruleCount 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCountAccess().getGroup()); }
		(rule__Count__Group__0)
		{ after(grammarAccess.getCountAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePaste
entryRulePaste
:
{ before(grammarAccess.getPasteRule()); }
	 rulePaste
{ after(grammarAccess.getPasteRule()); } 
	 EOF 
;

// Rule Paste
rulePaste 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPasteAccess().getGroup()); }
		(rule__Paste__Group__0)
		{ after(grammarAccess.getPasteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_PASTE
entryRuleTYPE_PASTE
:
{ before(grammarAccess.getTYPE_PASTERule()); }
	 ruleTYPE_PASTE
{ after(grammarAccess.getTYPE_PASTERule()); } 
	 EOF 
;

// Rule TYPE_PASTE
ruleTYPE_PASTE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_PASTEAccess().getSearchFieldKeyword()); }
		'SearchField'
		{ after(grammarAccess.getTYPE_PASTEAccess().getSearchFieldKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndFor
entryRuleEndFor
:
{ before(grammarAccess.getEndForRule()); }
	 ruleEndFor
{ after(grammarAccess.getEndForRule()); } 
	 EOF 
;

// Rule EndFor
ruleEndFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndForAccess().getGroup()); }
		(rule__EndFor__Group__0)
		{ after(grammarAccess.getEndForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUCTION__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getOpenParserRuleCall_0()); }
		ruleOpen
		{ after(grammarAccess.getINSTRUCTIONAccess().getOpenParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getGoToParserRuleCall_1()); }
		ruleGoTo
		{ after(grammarAccess.getINSTRUCTIONAccess().getGoToParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getVerifyParserRuleCall_2()); }
		ruleVerify
		{ after(grammarAccess.getINSTRUCTIONAccess().getVerifyParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getClickParserRuleCall_3()); }
		ruleClick
		{ after(grammarAccess.getINSTRUCTIONAccess().getClickParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getInsertParserRuleCall_4()); }
		ruleInsert
		{ after(grammarAccess.getINSTRUCTIONAccess().getInsertParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getUncheckParserRuleCall_5()); }
		ruleUncheck
		{ after(grammarAccess.getINSTRUCTIONAccess().getUncheckParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getCheckParserRuleCall_6()); }
		ruleCheck
		{ after(grammarAccess.getINSTRUCTIONAccess().getCheckParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getChooseParserRuleCall_7()); }
		ruleChoose
		{ after(grammarAccess.getINSTRUCTIONAccess().getChooseParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getVariableParserRuleCall_8()); }
		ruleVariable
		{ after(grammarAccess.getINSTRUCTIONAccess().getVariableParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getReadParserRuleCall_9()); }
		ruleRead
		{ after(grammarAccess.getINSTRUCTIONAccess().getReadParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getCountParserRuleCall_10()); }
		ruleCount
		{ after(grammarAccess.getINSTRUCTIONAccess().getCountParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getPasteParserRuleCall_11()); }
		rulePaste
		{ after(grammarAccess.getINSTRUCTIONAccess().getPasteParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getForParserRuleCall_12()); }
		ruleFor
		{ after(grammarAccess.getINSTRUCTIONAccess().getForParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUCTIONAccess().getEndForParserRuleCall_13()); }
		ruleEndFor
		{ after(grammarAccess.getINSTRUCTIONAccess().getEndForParserRuleCall_13()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_VERIFY__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_VERIFYAccess().getContainsParserRuleCall_0()); }
		ruleContains
		{ after(grammarAccess.getTYPE_VERIFYAccess().getContainsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_VERIFYAccess().getEqualParserRuleCall_1()); }
		ruleEqual
		{ after(grammarAccess.getTYPE_VERIFYAccess().getEqualParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CONTAINS__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_CONTAINSAccess().getTextKeyword_0()); }
		'Text'
		{ after(grammarAccess.getTYPE_CONTAINSAccess().getTextKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_CONTAINSAccess().getLinkKeyword_1()); }
		'Link'
		{ after(grammarAccess.getTYPE_CONTAINSAccess().getLinkKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_CONTAINSAccess().getImageKeyword_2()); }
		'Image'
		{ after(grammarAccess.getTYPE_CONTAINSAccess().getImageKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_PARAMETRE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_PARAMETREAccess().getValueParserRuleCall_0()); }
		ruleValue
		{ after(grammarAccess.getTYPE_PARAMETREAccess().getValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_PARAMETREAccess().getVarParserRuleCall_1()); }
		ruleVar
		{ after(grammarAccess.getTYPE_PARAMETREAccess().getVarParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CLICK__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_CLICKAccess().getLinkKeyword_0()); }
		'Link'
		{ after(grammarAccess.getTYPE_CLICKAccess().getLinkKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_CLICKAccess().getButtonKeyword_1()); }
		'Button'
		{ after(grammarAccess.getTYPE_CLICKAccess().getButtonKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_CLICKAccess().getImageKeyword_2()); }
		'Image'
		{ after(grammarAccess.getTYPE_CLICKAccess().getImageKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CHECK_UNCHECK__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getAllKeyword_0()); }
		'all'
		{ after(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getAllKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getGroup_1()); }
		(rule__TYPE_CHECK_UNCHECK__Group_1__0)
		{ after(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_INSTRUCTION__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_INSTRUCTIONAccess().getReadParserRuleCall_0()); }
		ruleRead
		{ after(grammarAccess.getTYPE_INSTRUCTIONAccess().getReadParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_INSTRUCTIONAccess().getCountParserRuleCall_1()); }
		ruleCount
		{ after(grammarAccess.getTYPE_INSTRUCTIONAccess().getCountParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_READ__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_READAccess().getLinkKeyword_0()); }
		'Link'
		{ after(grammarAccess.getTYPE_READAccess().getLinkKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_READAccess().getTitleKeyword_1()); }
		'Title'
		{ after(grammarAccess.getTYPE_READAccess().getTitleKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getTestKeyword_0()); }
	'Test'
	{ after(grammarAccess.getTestAccess().getTestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getNumberAssignment_1()); }
	(rule__Test__NumberAssignment_1)
	{ after(grammarAccess.getTestAccess().getNumberAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__3__Impl
	rule__Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getBodyAssignment_3()); }
	(rule__Test__BodyAssignment_3)*
	{ after(grammarAccess.getTestAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__0__Impl
	rule__Open__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getOpenKeyword_0()); }
	'Open'
	{ after(grammarAccess.getOpenAccess().getOpenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getBrowserAssignment_1()); }
	(rule__Open__BrowserAssignment_1)
	{ after(grammarAccess.getOpenAccess().getBrowserAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoTo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTo__Group__0__Impl
	rule__GoTo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoToAccess().getGoToKeyword_0()); }
	'GoTo'
	{ after(grammarAccess.getGoToAccess().getGoToKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoToAccess().getUrlAssignment_1()); }
	(rule__GoTo__UrlAssignment_1)
	{ after(grammarAccess.getGoToAccess().getUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__0__Impl
	rule__Verify__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }
	'Verify'
	{ after(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getTYPE_VERIFYParserRuleCall_1()); }
	ruleTYPE_VERIFY
	{ after(grammarAccess.getVerifyAccess().getTYPE_VERIFYParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Contains__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contains__Group__0__Impl
	rule__Contains__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contains__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainsAccess().getContainsKeyword_0()); }
	'Contains'
	{ after(grammarAccess.getContainsAccess().getContainsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contains__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contains__Group__1__Impl
	rule__Contains__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Contains__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainsAccess().getTypeAssignment_1()); }
	(rule__Contains__TypeAssignment_1)
	{ after(grammarAccess.getContainsAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contains__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contains__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contains__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainsAccess().getParametreAssignment_2()); }
	(rule__Contains__ParametreAssignment_2)
	{ after(grammarAccess.getContainsAccess().getParametreAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__0__Impl
	rule__Var__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getVarAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__1__Impl
	rule__Var__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getValueAssignment_1()); }
	(rule__Var__ValueAssignment_1)
	{ after(grammarAccess.getVarAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getVarAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__0__Impl
	rule__Equal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getEqualKeyword_0()); }
	'Equal'
	{ after(grammarAccess.getEqualAccess().getEqualKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__1__Impl
	rule__Equal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__2__Impl
	rule__Equal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getVar1Assignment_2()); }
	(rule__Equal__Var1Assignment_2)
	{ after(grammarAccess.getEqualAccess().getVar1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__3__Impl
	rule__Equal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getEqualAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__4__Impl
	rule__Equal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getEqualAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__5__Impl
	rule__Equal__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getVar2Assignment_5()); }
	(rule__Equal__Var2Assignment_5)
	{ after(grammarAccess.getEqualAccess().getVar2Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getEqualAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getClickKeyword_0()); }
	'Click'
	{ after(grammarAccess.getClickAccess().getClickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__1__Impl
	rule__Click__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getTypeAssignment_1()); }
	(rule__Click__TypeAssignment_1)
	{ after(grammarAccess.getClickAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getParametreAssignment_2()); }
	(rule__Click__ParametreAssignment_2)
	{ after(grammarAccess.getClickAccess().getParametreAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__0__Impl
	rule__Insert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
	'Insert'
	{ after(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__1__Impl
	rule__Insert__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getInKeyword_1()); }
	'in'
	{ after(grammarAccess.getInsertAccess().getInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__2__Impl
	rule__Insert__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getTypeAssignment_2()); }
	(rule__Insert__TypeAssignment_2)
	{ after(grammarAccess.getInsertAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__3__Impl
	rule__Insert__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getNameAssignment_3()); }
	(rule__Insert__NameAssignment_3)
	{ after(grammarAccess.getInsertAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__4__Impl
	rule__Insert__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getWithKeyword_4()); }
	'with'
	{ after(grammarAccess.getInsertAccess().getWithKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getParametreAssignment_5()); }
	(rule__Insert__ParametreAssignment_5)
	{ after(grammarAccess.getInsertAccess().getParametreAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Uncheck__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Uncheck__Group__0__Impl
	rule__Uncheck__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUncheckAccess().getUncheckKeyword_0()); }
	'Uncheck'
	{ after(grammarAccess.getUncheckAccess().getUncheckKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Uncheck__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUncheckAccess().getTypeAssignment_1()); }
	(rule__Uncheck__TypeAssignment_1)
	{ after(grammarAccess.getUncheckAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TYPE_CHECK_UNCHECK__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TYPE_CHECK_UNCHECK__Group_1__0__Impl
	rule__TYPE_CHECK_UNCHECK__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CHECK_UNCHECK__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CHECK_UNCHECK__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TYPE_CHECK_UNCHECK__Group_1__1__Impl
	rule__TYPE_CHECK_UNCHECK__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CHECK_UNCHECK__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getTableauAssignment_1_1()); }
	(rule__TYPE_CHECK_UNCHECK__TableauAssignment_1_1)*
	{ after(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getTableauAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CHECK_UNCHECK__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TYPE_CHECK_UNCHECK__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CHECK_UNCHECK__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
	'Check'
	{ after(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getTypeAssignment_1()); }
	(rule__Check__TypeAssignment_1)
	{ after(grammarAccess.getCheckAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Choose__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choose__Group__0__Impl
	rule__Choose__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChooseAccess().getChooseKeyword_0()); }
	'Choose'
	{ after(grammarAccess.getChooseAccess().getChooseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choose__Group__1__Impl
	rule__Choose__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChooseAccess().getTypeAssignment_1()); }
	(rule__Choose__TypeAssignment_1)
	{ after(grammarAccess.getChooseAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choose__Group__2__Impl
	rule__Choose__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChooseAccess().getParametreAssignment_2()); }
	(rule__Choose__ParametreAssignment_2)
	{ after(grammarAccess.getChooseAccess().getParametreAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choose__Group__3__Impl
	rule__Choose__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChooseAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getChooseAccess().getInKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choose__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChooseAccess().getNameAssignment_4()); }
	(rule__Choose__NameAssignment_4)
	{ after(grammarAccess.getChooseAccess().getNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_0()); }
	(rule__Variable__NameAssignment_0)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getInstructionAssignment_2()); }
	(rule__Variable__InstructionAssignment_2)
	{ after(grammarAccess.getVariableAccess().getInstructionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Read__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__0__Impl
	rule__Read__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getReadKeyword_0()); }
	'Read'
	{ after(grammarAccess.getReadAccess().getReadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__1__Impl
	rule__Read__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getTypeAssignment_1()); }
	(rule__Read__TypeAssignment_1)
	{ after(grammarAccess.getReadAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__2__Impl
	rule__Read__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getOfElementKeyword_2()); }
	'of Element '
	{ after(grammarAccess.getReadAccess().getOfElementKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getParametreAssignment_3()); }
	(rule__Read__ParametreAssignment_3)
	{ after(grammarAccess.getReadAccess().getParametreAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Count__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__0__Impl
	rule__Count__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getCountOfElementKeyword_0()); }
	'Count of Element '
	{ after(grammarAccess.getCountAccess().getCountOfElementKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getParametreAssignment_1()); }
	(rule__Count__ParametreAssignment_1)
	{ after(grammarAccess.getCountAccess().getParametreAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Paste__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paste__Group__0__Impl
	rule__Paste__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPasteAccess().getPasteKeyword_0()); }
	'Paste'
	{ after(grammarAccess.getPasteAccess().getPasteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paste__Group__1__Impl
	rule__Paste__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPasteAccess().getTypeAssignment_1()); }
	(rule__Paste__TypeAssignment_1)
	{ after(grammarAccess.getPasteAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paste__Group__2__Impl
	rule__Paste__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPasteAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPasteAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paste__Group__3__Impl
	rule__Paste__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPasteAccess().getParametreAssignment_3()); }
	(rule__Paste__ParametreAssignment_3)
	{ after(grammarAccess.getPasteAccess().getParametreAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paste__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPasteAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPasteAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_0()); }
	'For'
	{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getNameAssignment_1()); }
	(rule__For__NameAssignment_1)
	{ after(grammarAccess.getForAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getForAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLeftSquareBracketKeyword_3()); }
	'['
	{ after(grammarAccess.getForAccess().getLeftSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getTableauAssignment_4()); }
	(rule__For__TableauAssignment_4)*
	{ after(grammarAccess.getForAccess().getTableauAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getForAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EndFor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndFor__Group__0__Impl
	rule__EndFor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndFor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndForAccess().getEndForKeyword_0()); }
	'EndFor'
	{ after(grammarAccess.getEndForAccess().getEndForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndFor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndFor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndFor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndForAccess().getNameAssignment_1()); }
	(rule__EndFor__NameAssignment_1)
	{ after(grammarAccess.getEndForAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__NumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getNumberSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestAccess().getNumberSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getBodyINSTRUCTIONParserRuleCall_3_0()); }
		ruleINSTRUCTION
		{ after(grammarAccess.getTestAccess().getBodyINSTRUCTIONParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__BrowserAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getBrowserSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getOpenAccess().getBrowserSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoToAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getGoToAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contains__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainsAccess().getTypeTYPE_CONTAINSParserRuleCall_1_0()); }
		ruleTYPE_CONTAINS
		{ after(grammarAccess.getContainsAccess().getTypeTYPE_CONTAINSParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contains__ParametreAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainsAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0()); }
		ruleTYPE_PARAMETRE
		{ after(grammarAccess.getContainsAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getValueIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarAccess().getValueIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Var1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getVar1IDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getEqualAccess().getVar1IDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Var2Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getVar2IDTerminalRuleCall_5_0()); }
		RULE_ID
		{ after(grammarAccess.getEqualAccess().getVar2IDTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getTypeTYPE_CLICKParserRuleCall_1_0()); }
		ruleTYPE_CLICK
		{ after(grammarAccess.getClickAccess().getTypeTYPE_CLICKParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__ParametreAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0()); }
		ruleTYPE_PARAMETRE
		{ after(grammarAccess.getClickAccess().getParametreTYPE_PARAMETREParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getTypeTYPE_INSERTParserRuleCall_2_0()); }
		ruleTYPE_INSERT
		{ after(grammarAccess.getInsertAccess().getTypeTYPE_INSERTParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getInsertAccess().getNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__ParametreAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getParametreTYPE_PARAMETREParserRuleCall_5_0()); }
		ruleTYPE_PARAMETRE
		{ after(grammarAccess.getInsertAccess().getParametreTYPE_PARAMETREParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUncheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0()); }
		ruleTYPE_CHECK_UNCHECK
		{ after(grammarAccess.getUncheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_CHECK_UNCHECK__TableauAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getTableauSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTYPE_CHECK_UNCHECKAccess().getTableauSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0()); }
		ruleTYPE_CHECK_UNCHECK
		{ after(grammarAccess.getCheckAccess().getTypeTYPE_CHECK_UNCHECKParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChooseAccess().getTypeTYPE_CHOOSEParserRuleCall_1_0()); }
		ruleTYPE_CHOOSE
		{ after(grammarAccess.getChooseAccess().getTypeTYPE_CHOOSEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__ParametreAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChooseAccess().getParametreSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getChooseAccess().getParametreSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChooseAccess().getNameSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getChooseAccess().getNameSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__InstructionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getInstructionTYPE_INSTRUCTIONParserRuleCall_2_0()); }
		ruleTYPE_INSTRUCTION
		{ after(grammarAccess.getVariableAccess().getInstructionTYPE_INSTRUCTIONParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadAccess().getTypeTYPE_READParserRuleCall_1_0()); }
		ruleTYPE_READ
		{ after(grammarAccess.getReadAccess().getTypeTYPE_READParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__ParametreAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadAccess().getParametreSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getReadAccess().getParametreSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__ParametreAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountAccess().getParametreSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCountAccess().getParametreSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPasteAccess().getTypeTYPE_PASTEParserRuleCall_1_0()); }
		ruleTYPE_PASTE
		{ after(grammarAccess.getPasteAccess().getTypeTYPE_PASTEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paste__ParametreAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPasteAccess().getParametreIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getPasteAccess().getParametreIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getForAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__TableauAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getTableauSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getForAccess().getTableauSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndFor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEndForAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEndForAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
